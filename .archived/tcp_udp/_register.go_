package net

import (
	"bytes"
	"encoding/json"
	"net"

	reuse "github.com/libp2p/go-reuseport"
	"github.com/sirupsen/logrus"
)

//向服务器发出请求，会返回服务器上的列表清单
func udpRegister(clientID []byte, laddr, raddr string) (peers map[string]map[string]string, err error) {
	var dialer net.Conn
	dialer, err = reuse.Dial("udp", laddr, raddr)
	if err != nil {
		logrus.Errorf("连接服务器(%s)错误:%v\n", raddr, err)
	}
	defer dialer.Close()

	// 发送数据
	logrus.Infof("发送数据给服务器 %s \n", string(clientID))
	_, err = dialer.Write(clientID) // 发送数据
	if err != nil {
		logrus.Errorf("To server 发送数据失败: %v \n", err)
		return
	}

	// 接收数据
	var data [4096]byte
	n, err := dialer.Read(data[:])
	if err != nil {
		logrus.Errorf("接收数据失败: %v \n", err)
		return
	}

	err = json.Unmarshal(data[:n], &peers)
	if err != nil {
		logrus.Errorf("数据转换失败: %v \n", err)
		return
	}

	return
}

func Register(clientID string, laddr, saddr string) (err error) {

	//1.与服务器通信，并获得
	peers, err := udpRegister([]byte(clientID), laddr, saddr)
	if err != nil {
		logrus.Errorf("%v\n", err)
		return
	}
	logrus.Infof("注册返回消息: %v | %v\n", peers, err)

	//2.向所有peer发送UDP请求，打通隧道
	for name, peerAddr := range peers {
		if name != clientID {
			reader := bytes.NewReader([]byte(name))
			err = Sender(reader, laddr, peerAddr["udp"])
			if err != nil {
				logrus.Errorf("%v\n", err)
			}
		}
	}

	return
}
